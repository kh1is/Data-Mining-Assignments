# -*- coding: utf-8 -*-
"""Lab01.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1H_TAQZ5IT0ADt9fHVIkeYSYARNTfLoBK
"""

# Upload Files
from google.colab import files

uploaded = files.upload()

for fn in uploaded.keys():
  print('User uploaded file "{name}" with length {length} bytes'.format(
      name=fn, length=len(uploaded[fn])))

# Read data feaures and content
f =open("segmentation.data", "r")
if f.mode == 'r':
      dataContents =f.readlines()

dataContents.pop(0)
dataContents.pop(0)
dataContents.pop(0)

dataFeatures = dataContents.pop(0)

dataContents.pop(0)

dataContents

dataFeatures

# Read test features and content
f =open("segmentation.test", "r")
if f.mode == 'r':
      testContents =f.readlines()

testContents.pop(0)
testContents.pop(0)
testContents.pop(0)

testFeatures = testContents.pop(0)

testContents.pop(0)

testContents

#testFeatures

# Contents of both files
contents = dataContents + testContents
contents

# Creating list of list of strings for contents
splitedContents = [i.split(",") for i in contents]
splitedContents

# Creating list of strings for features
splitedFeatures = dataFeatures.split(",")
splitedFeatures.insert(0 , "Class")
splitedFeatures

# Creating dataFrame 
import pandas as pd

dataFrame = pd.DataFrame(splitedContents , columns=splitedFeatures)
dataFrame

# Fetching classes
classes = dataFrame.Class.unique()
classes

# Commented out IPython magic to ensure Python compatibility.
# Create Histogram plot for each class
# %matplotlib inline
import matplotlib.pyplot as plt

def histogram( x ):
  plt.hist(x)
  plt.show()
  return

# Loop in classes and create Histogram plot
for i in classes:
  temp = dataFrame.loc[dataFrame.Class == i]
  histogram(temp)

# Commented out IPython magic to ensure Python compatibility.
# Create Histogram plot for each class
# %matplotlib inline
import matplotlib.pyplot as plt

def histogram_bins( x ):
  plt.hist(x,bins=10)
  plt.show()
  return

# Loop in classes and create Histogram plot
for i in classes:
  temp = dataFrame.loc[dataFrame.Class == i]
  histogram_bins(temp)

# Create list of attributes
data = dataFrame.drop("Class", axis=1)
tmpFeatures = splitedFeatures[1::]
attributesList = []
j = 0
for i in tmpFeatures:
  listTemp = data.loc[:,i].values.tolist()
  listTemp2 = [float(k) for k in listTemp]
  attributesList.insert(j , listTemp2)
  j = j + 1

# Create boxplot
plt.boxplot(attributesList)
plt.show()

#Calculate correlation coefficient for Attribute List
import numpy
correlationMatrix = numpy.corrcoef(attributesList)
correlationMatrix

#Visualize correlationMatrix using imshow
plt.imshow(correlationMatrix)

# minmax normalization
from sklearn.preprocessing import minmax_scale

normalizedMinmaxList = minmax_scale(attributesList)

print(normalizedMinmaxList)

plt.hist(attributesList[0])

plt.show()

normalizedMinmaxAttribute = minmax_scale(attributesList[0])

plt.hist(normalizedMinmaxAttribute)

plt.show()

plt.boxplot(attributesList[0])

plt.show()

plt.boxplot(normalizedMinmaxAttribute)

plt.show()

# Zscore normalization
from scipy import stats

normalizedZscoreList = stats.zscore(attributesList)

print(normalizedZscoreList)

plt.hist(attributesList[0])

plt.show()

normalizedZscoreAttribute = stats.zscore(attributesList[0])

plt.hist(normalizedZscoreAttribute)

plt.show()

plt.boxplot(attributesList[0])

plt.show()

plt.boxplot(normalizedZscoreAttribute)

plt.show()

# Select number of components
from sklearn.decomposition import PCA
pca = PCA(n_components=2)
t = pca.fit(normalizedZscoreList)
print(t)
pca.explained_variance_ratio_

# Visualize correlation matrix of dataset after applying PCA
correlationMatrixPCA = numpy.corrcoef(pca.components_)
print(correlationMatrixPCA)
plt.imshow(correlationMatrixPCA)

from sklearn.feature_selection import SelectKBest
from sklearn.feature_selection import chi2
y = [1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1]

X_new = SelectKBest(chi2, k=2).fit_transform(normalizedMinmaxList,y)
print(X_new)
correlationMatrixPCANEW = numpy.corrcoef(X_new)
correlationMatrixPCANEW
plt.imshow(correlationMatrixPCANEW)